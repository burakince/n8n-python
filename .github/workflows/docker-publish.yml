name: Build and Publish N8N Python Docker Image

on:
  push:
    branches: [main]
    tags:
      - "*.*.*"
    paths:
      - ".github/workflows/docker-publish.yml"
      - "Dockerfile"
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ORAS
        id: install_oras
        uses: oras-project/setup-oras@main

      - name: Install Cosign
        id: install_cosign
        uses: sigstore/cosign-installer@v3.9.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
        with:
          platforms: all

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        id: docker_hub_login
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        id: ghcr_login
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry (ORAS)
        id: oras_ghcr_login
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | oras login ghcr.io --username ${{ github.actor }} --password-stdin

      - name: Publish Artifact Hub Manifest
        id: publish_ah_manifest
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        run: |
          oras push \
            ghcr.io/${{ env.IMAGE_NAME }}:artifacthub.io \
            --config /dev/null:application/vnd.cncf.artifacthub.config.v1+yaml \
            artifacthub-repo.yml:application/vnd.cncf.artifacthub.repository-metadata.layer.v1.yaml

      - name: Extract Docker metadata
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ env.IMAGE_NAME }}
            ghcr.io/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=ref,event=tag
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            io.artifacthub.package.maintainers=[{"name":"burakince","email":"burak.ince@linux.org.tr"}]
            io.artifacthub.package.logo-url=https://avatars1.githubusercontent.com/u/45487711?s=200&v=4
            io.artifacthub.package.keywords=n8n,workflow-automation,workflow,automation,ipaas,integration-framework,low-code-plattform,low-code
            io.artifacthub.package.license=MIT
            io.artifacthub.package.alternative-locations=docker.io/${{ env.IMAGE_NAME }}

      - name: Build image for local analysis
        id: build-docker-image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: docker.io/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Snyk to check Docker image for vulnerabilities
        id: docker-image-scan
        continue-on-error: true
        uses: snyk/actions/docker@0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: docker.io/${{ env.IMAGE_NAME }}:latest
          args: --file=Dockerfile --severity-threshold=medium --sarif-file-output=snyk.sarif

      - name: Process Snyk SARIF file
        if: hashFiles('snyk.sarif') != ''
        run: |
          jq '{version: .version, runs: [(.runs | reduce .[] as $run ([]; . + [$run | .tool.driver.name = "Snyk_Container_" + (.runs | length | tostring)] | .results = ($run.results // []) | .artifacts = ($run.artifacts // []))] | .[0])}' snyk.sarif > processed_snyk.sarif

      - name: Upload result to GitHub Code Scanning
        if: hashFiles('processed_snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: processed_snyk.sarif

      - name: Ensure the image can be cross-compiled
        if: github.event_name == 'pull_request'
        id: cross-compile-check
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64/v8,linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64/v8,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker images
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign -y {}@${{ steps.build-and-push.outputs.digest }}
